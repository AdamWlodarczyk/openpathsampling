##########################################################################
# this script was generated by openmm-builder. to customize it further,
# you can save the file to disk and edit it with your favorite editor.
##########################################################################

from __future__ import print_function
from simtk.openmm import app
import simtk.openmm as mm
from simtk import unit
from sys import stdout

#pdb = app.PDBFile('../resources/AD_initial_frame.pdb')
pdb = app.PDBFile('./output.pdb')
forcefield = app.ForceField('amber96.xml', 'tip3p.xml')

system = forcefield.createSystem(pdb.topology, nonbondedMethod=app.PME, 
    nonbondedCutoff=1.0*unit.nanometers, constraints=app.HBonds, rigidWater=True, 
    ewaldErrorTolerance=0.0005)
integrator = mm.LangevinIntegrator(300*unit.kelvin, 1.0/unit.picoseconds, 
    2.0*unit.femtoseconds)
integrator.setConstraintTolerance(0.00001)
system.addForce(mm.MonteCarloBarostat(1*unit.atmospheres, 300*unit.kelvin, 25))

platform = mm.Platform.getPlatformByName('CPU')
simulation = app.Simulation(pdb.topology, system, integrator, platform)
simulation.context.setPositions(pdb.positions)

#print('Minimizing...')
#simulation.minimizeEnergy()

#simulation.context.setVelocitiesToTemperature(300*unit.kelvin)
#print('Equilibrating...')
#simulation.step(100)
#
#simulation.loadState('output')

simulation.reporters.append(app.DCDReporter('trajectory.dcd', 1000))
simulation.reporters.append(app.StateDataReporter(stdout, 1000, step=True, 
    time=True, potentialEnergy=True, kineticEnergy=True, totalEnergy=True, 
    temperature=True, volume=True,  density=True, progress=True, remainingTime=True, speed=True, 
    totalSteps=1000, separator='\t'))


print('Running Production...')
simulation.step(1000000)
simulation.saveState("output")
positions = simulation.context.getState(getPositions=True).getPositions()
newboxVectors=  simulation.context.getState(getParameters=True).getPeriodicBoxVectors()
print(newboxVectors)
oldboxVectors = simulation.topology.getPeriodicBoxVectors()
print(oldboxVectors)
simulation.topology.setPeriodicBoxVectors(newboxVectors)
checkboxVectors = simulation.topology.getPeriodicBoxVectors()
print(checkboxVectors)

app.PDBFile.writeFile(simulation.topology, positions,open('output.pdb', 'w'))
print('Done!')

